package com.ofbiz.utility;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;

import org.ofbiz.entity.condition.EntityFieldValue;
import org.ofbiz.base.util.StringUtil;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.ofbiz.base.util.Debug;
import org.ofbiz.base.util.UtilDateTime;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.base.util.UtilProperties;
import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.entity.Delegator;
import org.ofbiz.entity.GenericEntityException;
import org.ofbiz.entity.GenericValue;
import org.ofbiz.entity.condition.EntityCondition;
import org.ofbiz.entity.condition.EntityFunction;
import org.ofbiz.entity.condition.EntityOperator;
import org.ofbiz.entity.util.EntityUtil;
import org.ofbiz.service.ServiceUtil;

import java.math.BigDecimal;

import javolution.util.FastList;
import javolution.util.FastMap;

public class OMSUtility {

    public static final String module = OMSUtility.class.getName();
    
    public static String availableLocales(HttpServletRequest request, HttpServletResponse response) {
    	List<Locale> availableLocaleList = UtilMisc.availableLocales();
    	if(UtilValidate.isNotEmpty(availableLocaleList)) {
    		request.setAttribute("availableLocaleList", availableLocaleList);
    	}
    	return "success";
    }
    public static String generateQRString(GenericValue pickListItem,String size,String itemSeq,String productType) {
    	String itemCode = UtilProperties.getPropertyValue("oms.properties", "AB_"+productType);
    	if(UtilValidate.isEmpty(itemCode)){
    		itemCode = "XX";
    	}
    	//Release is treated as a 2 digit number and Sequence and Total items as 3 digit number.
    	
    	String qrCodeString = null;
    	if(UtilValidate.isNotEmpty(pickListItem)){
    		String orderId = pickListItem.getString("orderId");
    		String releaseNumber = pickListItem.getString("shipGroupSeqId");
    		Integer releaseNumberInt = Integer.valueOf(releaseNumber);
    	    qrCodeString = orderId + "-(" + formatPaddedNumer(releaseNumberInt.toString(),2) + ")-" + itemCode + "-(" + formatPaddedNumer(itemSeq,3) + "-" + formatPaddedNumer(size,3) +")";
    	}
    	return qrCodeString;
    }
    public static String formatPaddedNumer(String number, int numericPadding) {
        StringBuilder outStrBfr = new StringBuilder(number);
        while (numericPadding > outStrBfr.length()) {
            outStrBfr.insert(0, '0');
        }
        return outStrBfr.toString();
    }

	// SV prepare Shrinkage And PrintQty in proper format
    public static Map<String, String> getShrinkageAndPrintQty(String quantity,String mshrinkage,String fshrinkage) {
    	Map<String, String> shrinkageAndPrintQtyMap = FastMap.newInstance();
    	try{
	    	BigDecimal f_shrinkage = BigDecimal.ZERO, m_shrinkage , totalQty;
	    	BigDecimal printqty= BigDecimal.ZERO;
	    	BigDecimal hundred = new BigDecimal("100");
	    	
	    	// Get fshrinkage in percentage (comment this code , now f_shrinkage directly getting from entity)
	    	/*  
	    		if(UtilValidate.isNotEmpty(fshrinkage)){
	    		f_shrinkage = new BigDecimal(fshrinkage);
	    		f_shrinkage = f_shrinkage.multiply(hundred);
	    		}
	    	shrinkageAndPrintQtyMap.put("f_shrinkage", f_shrinkage.setScale(2,BigDecimal.ROUND_HALF_UP).toString());*/
	    	
	    	// Get print Quantity 
	    	if(UtilValidate.isNotEmpty(quantity) && UtilValidate.isNotEmpty(mshrinkage) && UtilValidate.isNotEmpty(fshrinkage) ){
	    		totalQty = new BigDecimal(quantity);
	    		m_shrinkage =new BigDecimal(mshrinkage);
	    		m_shrinkage =new BigDecimal(fshrinkage);
	    		printqty = ((f_shrinkage.add(m_shrinkage)).multiply(totalQty).divide(hundred)).add(totalQty);
	    	}
	    	shrinkageAndPrintQtyMap.put("printqty", printqty.setScale(2, BigDecimal.ROUND_HALF_UP).toString());
    	}catch(Exception ee){
    		ee.printStackTrace();
    	}
		return shrinkageAndPrintQtyMap;
    	
    }
    //CJ calulate SQ FT value for wallpaper
    public static String getSqFtValue(String widthString, BigDecimal quantity, String wallpaperType,String lengthString) {
        BigDecimal sqFtValue = BigDecimal.ZERO;
        BigDecimal length = BigDecimal.ZERO;
        if(UtilValidate.isNotEmpty(widthString)){
        	 BigDecimal width = new BigDecimal(widthString);
        	 if(width.compareTo(BigDecimal.ZERO) >0 && quantity.compareTo(BigDecimal.ZERO) >0){
	        	 if(UtilValidate.isNotEmpty(wallpaperType) && ("Custom Roll").equalsIgnoreCase(wallpaperType)){
	        		 if(UtilValidate.isNotEmpty(lengthString))
	        		 {
	        			 length = new BigDecimal(lengthString);
	        			 quantity = quantity.multiply(length);
	        		 }
	        		 sqFtValue = quantity.multiply(width.divide(new BigDecimal("12"),2,BigDecimal.ROUND_HALF_UP));
	        	 }else if(UtilValidate.isNotEmpty(wallpaperType) && ("Swatch").equalsIgnoreCase(wallpaperType)){
	        		 sqFtValue = quantity.multiply(width.divide(new BigDecimal("12"),2,BigDecimal.ROUND_HALF_UP));
	        	 }else{
	        		 sqFtValue = quantity.multiply(width);
	        	 }
        	 }
        }
       
        return (sqFtValue.setScale(2,BigDecimal.ROUND_HALF_UP)).toString();
    }
    
    // SV add this to create QR code and store in OrderItemAttribute
 
    public static String storeQrCode(Delegator delegator,List<String> orderIdslist){
    	List<String> orderIdlist = orderIdslist;
    	List<GenericValue> orderItemsList = null;
    	List<GenericValue> orderItemAttributes = null;
    	List<GenericValue> orderItemShipGroupAssoc =null;
    	List<GenericValue> orderItemShipGroupFilteredList =null;
    	List<String> orderItemSeqIdList =null;
    	List<String> releaseNumberList = null;
    	List<GenericValue> toBeStored = FastList.newInstance();
    	String qrCodeString=null , gs1QrCodeString=null, gs2QrCodeString=null , liningQrCodeString=null;
    	try{
    		for(String orderId : orderIdlist){
    			orderItemShipGroupAssoc = delegator.findByAndCache("OrderItemShipGroupAssoc", UtilMisc.toMap("orderId", orderId));
    			releaseNumberList = EntityUtil.getFieldListFromEntityList(orderItemShipGroupAssoc, "shipGroupSeqId", true);
    			if(UtilValidate.isNotEmpty(releaseNumberList)){
    				for(String releaseNumber : releaseNumberList){
    					orderItemShipGroupFilteredList = EntityUtil.filterByCondition(orderItemShipGroupAssoc, EntityCondition.makeCondition("shipGroupSeqId", releaseNumber));
    					orderItemSeqIdList = EntityUtil.getFieldListFromEntityList(orderItemShipGroupFilteredList, "orderItemSeqId", true);
    					EntityCondition checkCondition = EntityCondition.makeCondition(UtilMisc.toList(
                                EntityCondition.makeCondition("orderId", EntityOperator.EQUALS, orderId),
                                EntityCondition.makeCondition("orderItemSeqId", EntityOperator.IN, orderItemSeqIdList)), EntityOperator.AND);
    					orderItemsList = delegator.findList("OrderItem", checkCondition, null, null, null, true);
    					int itemSeq =1;
    					if(UtilValidate.isNotEmpty(orderItemsList)){
    	        			for(GenericValue orderItem : orderItemsList){
    	        				String itemCode = UtilProperties.getPropertyValue("oms.properties", "AB_"+orderItem.getString("productTypeTypeId"));
    	        				Integer releaseNumberInt = Integer.valueOf(releaseNumber);
    	        				
    	        				EntityCondition attrCondition = EntityCondition.makeCondition(UtilMisc.toList(
    	                                EntityCondition.makeCondition("orderId", EntityOperator.EQUALS, orderId),
    	                                EntityCondition.makeCondition("orderItemSeqId", EntityOperator.EQUALS, orderItem.getString("orderItemSeqId"))), EntityOperator.AND);
    	        				
    	        				EntityCondition attrNameCondition = EntityCondition.makeCondition(UtilMisc.toList(
    	                                EntityCondition.makeCondition("attrName", EntityOperator.EQUALS, "GS1_WFX_CODE"),
    	                                EntityCondition.makeCondition("attrName", EntityOperator.EQUALS, "GS2_WFX_CODE"),
    	                                EntityCondition.makeCondition("attrName", EntityOperator.EQUALS, "LINING_CON")), EntityOperator.OR);
    	        				
    	        				EntityCondition mainCond = EntityCondition.makeCondition(
    	        						UtilMisc.toList(attrCondition, attrNameCondition), EntityOperator.AND);
    	        				orderItemAttributes = delegator.findList("OrderItemAttribute", mainCond, null, null, null, true);
    	        				Map<String, String> qrCodeCheckMap = FastMap.newInstance();
    	        				int seqForLining = 1;
	              	       	   	for(GenericValue orderItemAttribute : orderItemAttributes){
	              	       	   		if(orderItem.getString("productTypeTypeId").equalsIgnoreCase("FASHION")){
	              	       	   			if(orderItemAttribute.getString("attrName").startsWith("GS1") && UtilValidate.isEmpty(qrCodeCheckMap.get("gs1Check"))){
	              	       	   				qrCodeCheckMap.put("gs1Check","true");
	              	       	   			}
	              	       	   			if((orderItemAttribute.getString("attrName")).startsWith("GS2") && UtilValidate.isEmpty(qrCodeCheckMap.get("gs2Check"))){
	              	       	   				qrCodeCheckMap.put("gs2Check","true");
	              	       	   			}
	              	       	   			if((orderItemAttribute.getString("attrName")).startsWith("LINING") && UtilValidate.isEmpty(qrCodeCheckMap.get("liningCheck"))){
	              	       	   				qrCodeCheckMap.put("liningCheck","true");
	              	       	   			}
	              	       	   		}
	              	       	   	}
		              	       	if(orderItem.getString("productTypeTypeId").equalsIgnoreCase("FASHION")){
	          	       	   			if(UtilValidate.isNotEmpty(qrCodeCheckMap.get("gs1Check")) && "true".equals(qrCodeCheckMap.get("gs1Check"))){
	          	       	   				gs1QrCodeString = orderId + "-(" + formatPaddedNumer(String.valueOf(releaseNumberInt),2) + ")-" + itemCode + "-(" + formatPaddedNumer("1",3) + "-" + formatPaddedNumer(String.valueOf(orderItemAttributes.size()),3) +")";
	          	       	   				toBeStored.add(makeQrcodeValue(delegator,orderId ,orderItem.getString("orderItemSeqId") , orderItem.getString("productTypeTypeId") , gs1QrCodeString , "GS1"));
	          	       	   				seqForLining++;
	          	       	   			}
		              	       	   	if(UtilValidate.isNotEmpty(qrCodeCheckMap.get("gs2Check")) && "true".equals(qrCodeCheckMap.get("gs2Check"))){
		              	       	   		gs2QrCodeString = orderId + "-(" + formatPaddedNumer(String.valueOf(releaseNumberInt),2) + ")-" + itemCode + "-(" + formatPaddedNumer("2",3) + "-" + formatPaddedNumer(String.valueOf(orderItemAttributes.size()),3) +")";
		              	       	   		toBeStored.add(makeQrcodeValue(delegator,orderId ,orderItem.getString("orderItemSeqId") , orderItem.getString("productTypeTypeId") , gs2QrCodeString , "GS2"));
		              	       	   		seqForLining++;
		              	       	   	}
			              	       	if(UtilValidate.isNotEmpty(qrCodeCheckMap.get("liningCheck")) && "true".equals(qrCodeCheckMap.get("liningCheck"))){
			              	       		liningQrCodeString = orderId + "-(" + formatPaddedNumer(String.valueOf(releaseNumberInt),2) + ")-" + itemCode + "-(" + formatPaddedNumer(String.valueOf(seqForLining),3) + "-" + formatPaddedNumer(String.valueOf(orderItemAttributes.size()),3) +")";
			              	       		toBeStored.add(makeQrcodeValue(delegator,orderId ,orderItem.getString("orderItemSeqId") , orderItem.getString("productTypeTypeId") , liningQrCodeString , "LINING"));
			              	       	}
	          	       	   		}else{
	   	        					qrCodeString = orderId + "-(" + formatPaddedNumer(String.valueOf(releaseNumberInt),2) + ")-" + itemCode + "-(" + formatPaddedNumer(String.valueOf(itemSeq),3) + "-" + formatPaddedNumer(String.valueOf(orderItemSeqIdList.size()),3) +")";
	   	        					toBeStored.add(makeQrcodeValue(delegator,orderId ,orderItem.getString("orderItemSeqId") , orderItem.getString("productTypeTypeId") , qrCodeString , "GS1"));
	          	       	   		}
    	    					itemSeq++;
    	    					 
		                    	 
    	    					Debug.log("gs1QrCodeString---"+gs1QrCodeString+"gs2QrCodeString----"+gs2QrCodeString+"liningQrCodeString----"+liningQrCodeString+"Normal qrCodeString"+qrCodeString);
    	        			}
    	        		}
    				}
    			}
    		}
    		if(UtilValidate.isNotEmpty(toBeStored)){
    			delegator.storeAll(toBeStored);
    		}
    	}catch(Exception ee){
    		ee.printStackTrace();
    	}
    	
		return "success";
    }
    
    // SV Add the to prepare GenericValue to store QR code
    public static GenericValue makeQrcodeValue(Delegator delegator , String orderId , String orderItemSeqId ,String productTypeTypeId ,String qrCode , String componentType){
     GenericValue orderItemQRCodeToStore = delegator.makeValue("OrderItemQRCodeStatus");
     try{
    	 orderItemQRCodeToStore.put("orderId", orderId);
         orderItemQRCodeToStore.put("orderItemSeqId", orderItemSeqId);
         orderItemQRCodeToStore.put("productTypeId", productTypeTypeId);
         orderItemQRCodeToStore.put("qrCode", qrCode);
         orderItemQRCodeToStore.put("componentType", componentType);
         orderItemQRCodeToStore.put("processStatus", "ORDER_IN_PROGRESS");
     }catch (Exception e) {
         e.printStackTrace();
     }
	 return orderItemQRCodeToStore;
    	
    }
    
    // SV get party id list from the party name for customer name search
    
    public static List<String> getPartyIdListFromName(Delegator delegator , String partyFirstName){
    	String partyName = partyFirstName;
    	List<GenericValue> contactMechs = null;
    	List<String> orderPartyListIds = new ArrayList<String>();
	  	try {
			//EntityCondition entityCondition = EntityCondition.makeCondition("firstName", EntityOperator.LIKE, "%"+partyName+"%");
			EntityCondition entityCondition = EntityCondition.makeCondition(EntityFunction.UPPER(EntityFieldValue.makeFieldValue("firstName")),
            EntityOperator.LIKE, partyName.toUpperCase() + "%");
	  		contactMechs = delegator.findList("Person", entityCondition, null, null, null, true);
			if (UtilValidate.isNotEmpty(contactMechs)) 
		    {
		        for(GenericValue contactMech : contactMechs)
		        {
		            orderPartyListIds.add(contactMech.getString("partyId"));
		        }
		    }
		} catch (GenericEntityException e) {
			e.printStackTrace();
		}
	    
		return orderPartyListIds;
	  
  }
    //Get the orders which are having all the status as itemStatus by Munnu
	public static Map<String, String> getReadyToPackOrders(Delegator delegator, String itemStatus) {
		List<GenericValue> listOfOrders = null;
		Set<String> set = new HashSet<String>();
		Map<String, String> readyToPack = new HashMap<String, String>();
		try {
			//This view is used to find the order status as release wise
			listOfOrders = delegator.findList("OrderItemAndShipGroupAssoc", null, UtilMisc.toSet("orderId", "statusId"),
					null, null, false);

			for (GenericValue order : listOfOrders) {
				if (order.getString("statusId").equals(itemStatus) && !set.contains(order.getString("orderId"))) {
					readyToPack.put(order.getString("orderId"), order.getString("statusId"));
				}

				else if (readyToPack.containsKey(order.getString("orderId"))
						&& !order.getString("statusId").equals(itemStatus)) {
					readyToPack.remove(order.getString("orderId"));
					set.add(order.getString("orderId"));

				} else {
					set.add(order.getString("orderId"));

				}

			}
		} catch (GenericEntityException e) {
			e.printStackTrace();
		}
		
		return readyToPack;

	}
     
}

    