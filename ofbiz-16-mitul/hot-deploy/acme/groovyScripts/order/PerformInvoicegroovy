import java.util.*
import java.sql.Timestamp
import org.apache.ofbiz.entity.*
import org.apache.ofbiz.base.util.*
import org.apache.ofbiz.entity.util.*

module = "JobCardList.groovy"
orderHeader = null;
jobCardId = parameters.jobCardId;
if(UtilValidate.isNotEmpty(jobCardId)) {
    
    println("======jobCardId=====12121212====="+jobCardId+"===========");

    orderHeaderAndjobCardGV = null;
    //get the order types
    jobCardList = from("OrderHeaderAndJobCard").where("jobCardId", jobCardId).queryList()
    if(UtilValidate.isNotEmpty(jobCardList)) {
    orderHeaderAndjobCardGV = EntityUtil.getFirst(jobCardList);

    orderHeader = from("OrderHeader").where("orderId", orderHeaderAndjobCardGV.orderId).queryOne()
    		 println("======jobCardId=====12121212====="+orderHeader+"===========");
    if(UtilValidate.isNotEmpty(orderHeader)){
	    //orderHeader = orderHeader;
	
	    context.orderHeaderAndjobCardGV = orderHeaderAndjobCardGV;
	    
	    vehicleDetail = from("Vehicle").where("vehicleId", orderHeaderAndjobCardGV.vehicleId).queryOne()
	    context.vehicleDetail=vehicleDetail;

	
	    //get the order items
	    jobCardDetails = from("OrderItem").where("orderId", orderHeader.orderId,"statusId","ITEM_APPROVED").orderBy("orderItemSeqId").queryList()
	    context.jobCardDetails = jobCardDetails
	    		
	    orderAdjustmentList = from("OrderAdjustment").where("orderId", orderHeader.orderId).queryList();
	    context.orderAdjustmentList = orderAdjustmentList;
	    
	    
	    println("======orderHeader.orderId=========="+orderHeader.orderId+"===========");
	    orderRoles = from("OrderRole").where("orderId", orderHeaderAndjobCardGV.orderId, "roleTypeId", "SHIP_TO_CUSTOMER").queryList();
	    if(UtilValidate.isNotEmpty(orderRoles)){
	        orderRoleGV = EntityUtil.getFirst(orderRoles);
	    	println("======orderRoleGV=========="+orderRoleGV+"===========");
		    partyContactDetailByPurposeList = from("PartyContactDetailByPurpose").where("partyId", orderRoleGV.partyId).queryList();
		
		    partyEmail = null;
		    partyAddress = null;
		    partyAndPostalAddressGV = EntityUtil.getFirst(partyContactDetailByPurposeList);
		    context.partyAndPostalAddressGV=partyAndPostalAddressGV;
		    
		    partyContactDetailByPurposeList.each
		    { partyContactDetailByPurpose ->
		        if("PRIMARY_EMAIL".equals(partyContactDetailByPurpose.contactMechPurposeTypeId)) {
		            partyEmail = partyContactDetailByPurpose.infoString;
		        }
		        if("GENERAL_LOCATION".equals(partyContactDetailByPurpose.contactMechPurposeTypeId)) {
		            partyAddress = partyContactDetailByPurpose.address1 + partyContactDetailByPurpose.address2 + partyContactDetailByPurpose.city + partyContactDetailByPurpose.postalCode;
		        }
		    }
		    context.partyAddress = partyAddress;
		    context.partyEmail = partyEmail;
	    }
	
	    vehicleList = from("Vehicle").where("vehicleId", orderHeaderAndjobCardGV.vehicleId).queryList();
	
	    vehicleGV = EntityUtil.getFirst(vehicleList);
	    context.vehicleGV=vehicleGV;
	
	    
	
	    // get the order statuses
	    orderStatuses = from("StatusItem").where("statusTypeId", "ORDER_STATUS").orderBy("sequenceId", "description").queryList()
	    context.orderStatuses = orderStatuses
    }
    }
    context.orderHeader = orderHeader;
}